import {
  usePendingPromises,
  VueFire,

  useSSRInitialState,

  // TODO: conditional imports
  VueFireAppCheck,
} from 'vuefire'
import { initializeApp } from 'firebase/app'
import {
  defineNuxtPlugin,
  useAppConfig,
  useRuntimeConfig,
} from '#app'
import {
  connectFirestoreEmulator,
  getFirestore,
} from 'firebase/firestore'
import {
connectDatabaseEmulator,
getDatabase,
} from 'firebase/database'
import {
  toRaw,
} from 'vue-demi'
import {
  // TODO: conditional imports
  ReCaptchaV3Provider,
  ReCaptchaEnterpriseProvider,
  CustomProvider,
} from 'firebase/app-check'

export default defineNuxtPlugin((nuxtApp) => {
  const appConfig = useAppConfig()

  const firebaseApp = nuxtApp.$firebaseApp

  // TODO: emulator option
  // connectFirestoreEmulator(getFirestore(firebaseApp), 'localhost', 8080)
  // connectDatabaseEmulator(getDatabase(firebaseApp), 'localhost', 8081)

  const modules = []

  <% if(options.auth) { %>
  // Auth
  <% } %>

  <% if(options.appCheck) { %>
  modules.push(VueFireAppCheck({
    ...appConfig.vuefireOptions.appCheck,
    provider: '<%= options.appCheck.provider %>' === 'ReCaptchaV3'
      ? new ReCaptchaV3Provider('<%= options.appCheck.key %>')
      : new CustomProvider({
        getToken: () => Promise.reject(
          process.env.NODE_ENV !== 'production'
            ? new Error('Unknown provider "<%= options.appCheck.provider %>"')
            : new Error()
          ),
      }),
  }))
  <% } %>

  nuxtApp.vueApp.use(VueFire, {
    firebaseApp,
    modules,
  })

  <% if(options.ssr) { %>
  if (process.server) {
    // collect the initial state
    nuxtApp.payload.vuefire = useSSRInitialState(undefined, firebaseApp)
  } else if (nuxtApp.payload?.vuefire) {
    // hydrate the plugin state from nuxtApp.payload.vuefire
    useSSRInitialState(nuxtApp.payload.vuefire, firebaseApp)
  }
  <% } %>
})
