import {
  usePendingPromises,
  VueFire,

  useSSRInitialState,

  // TODO: conditional imports
  VueFireAppCheck,
} from 'vuefire'
import { initializeApp } from 'firebase/app'
import {
  defineNuxtPlugin,
  useAppConfig,
  useRuntimeConfig,
} from '#app'
import {
  connectFirestoreEmulator,
  getFirestore,
} from 'firebase/firestore'
import {
connectDatabaseEmulator,
getDatabase,
} from 'firebase/database'
import {
  toRaw,
} from 'vue-demi'
import {
  // TODO: conditional imports
  ReCaptchaV3Provider,
  ReCaptchaEnterpriseProvider,
  CustomProvider,
} from 'firebase/app-check'

export default defineNuxtPlugin((nuxtApp) => {
  const appConfig = useAppConfig()
  const firebaseConfig = toRaw(appConfig).firebaseConfig

  const firebaseApp = initializeApp(firebaseConfig)

  // TODO: emulator option
  // connectFirestoreEmulator(getFirestore(firebaseApp), 'localhost', 8080)
  // connectDatabaseEmulator(getDatabase(firebaseApp), 'localhost', 8081)

  nuxtApp.vueApp.use(VueFire, {
    firebaseApp,
    modules: [
    <% if(options.auth) { %>
      // Auth
    <% } %>
    <% if(options.appCheck) { %>
      VueFireAppCheck({
        ...appConfig.vuefireOptions.appCheck,
        provider: process.isClient
          ? new ReCaptchaV3Provider('<%= options.appCheck.key %>')
          : new CustomProvider({
            getToken: () => Promise.resolve({ token: '', expireTimeMillis: 1 })
          }),
      }),
    <% } %>
    ],
  })

  if (process.server) {
    // TODO: pass the firebaseApp
    nuxtApp.payload.vuefire = useSSRInitialState(undefined, firebaseApp)
  } else if (nuxtApp.payload?.vuefire) {
    // hydrate the plugin state from nuxtApp.payload.vuefire
    useSSRInitialState(nuxtApp.payload.vuefire, firebaseApp)
  }

  return {}
})
